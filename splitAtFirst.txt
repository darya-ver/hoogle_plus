monospec:((d) -> (([((d))]) -> ((([((d))]) , ([((d))])))))
goal:(Data.Function.$)'ho', Data.Function.id'ho' ‚ä¢ goal :: <d> . ((d) -> (([((d))]) -> ((([((d))]) , ([((d))])))))
goal = (?? :: (_))
(depth: 3)
destinationType:((([((d))]) , ([((d))])))
unifiedFuns: ("snd",(((a) , ((([((d))]) , ([((d))])))) -> (([((d))]) , ([((d))]))))
("fst",((((([((d))]) , ([((d))]))) , (b)) -> (([((d))]) , ([((d))]))))
("Pair",([((d))] -> ([((d))] -> (([((d))]) , ([((d))])))))
("GHC.List.unzip",([((((d) , (d))))] -> (([((d))]) , ([((d))]))))
("GHC.List.sum",(@@hplusTC@@Num ((([((d))]) , ([((d))]))) -> ([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))])))))
("GHC.List.splitAt",(Int -> ([((d))] -> (([((d))]) , ([((d))])))))
("GHC.List.product",(@@hplusTC@@Num ((([((d))]) , ([((d))]))) -> ([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))])))))
("GHC.List.minimum",(@@hplusTC@@Ord ((([((d))]) , ([((d))]))) -> ([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))])))))
("GHC.List.maximum",(@@hplusTC@@Ord ((([((d))]) , ([((d))]))) -> ([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))])))))
("GHC.List.last",([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))]))))
("GHC.List.head",([(((([((d))]) , ([((d))]))))] -> (([((d))]) , ([((d))]))))
("Data.Tuple.swap",((([((d))]) , ([((d))])) -> (([((d))]) , ([((d))]))))
("Data.Tuple.snd",(((a) , ((([((d))]) , ([((d))])))) -> (([((d))]) , ([((d))]))))
("Data.Tuple.fst",((((([((d))]) , ([((d))]))) , (b)) -> (([((d))]) , ([((d))]))))
("Data.Maybe.fromMaybe",((([((d))]) , ([((d))])) -> (Maybe ((([((d))]) , ([((d))]))) -> (([((d))]) , ([((d))])))))
("Data.Maybe.fromJust",(Maybe ((([((d))]) , ([((d))]))) -> (([((d))]) , ([((d))]))))
("Data.Function.id",((([((d))]) , ([((d))])) -> (([((d))]) , ([((d))]))))
("Data.Function.const",((([((d))]) , ([((d))])) -> (b -> (([((d))]) , ([((d))])))))
("Data.Either.partitionEithers",([((Either (d) (d)))] -> (([((d))]) , ([((d))]))))
("Data.Either.fromRight",((([((d))]) , ([((d))])) -> (Either (a) ((([((d))]) , ([((d))]))) -> (([((d))]) , ([((d))])))))
("Data.Either.fromLeft",((([((d))]) , ([((d))])) -> (Either ((([((d))]) , ([((d))]))) (b) -> (([((d))]) , ([((d))])))))
("Data.Bool.bool",((([((d))]) , ([((d))])) -> ((([((d))]) , ([((d))])) -> (Bool -> (([((d))]) , ([((d))]))))))
("(GHC.List.!!)",([(((([((d))]) , ([((d))]))))] -> (Int -> (([((d))]) , ([((d))])))))

(Pair (arg1) (GHC.List.repeat (arg0)))
(Pair (arg1) (Data.Function.const (arg1) (arg0)))
(Pair (arg1) (Cons (arg0) (arg1)))
(Pair (GHC.List.tail (arg1)) (GHC.List.repeat (arg0)))
(Pair (GHC.List.tail (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (GHC.List.tail (arg1)) (Cons (arg0) (arg1)))
(Pair (GHC.List.reverse (arg1)) (GHC.List.repeat (arg0)))
(Pair (GHC.List.reverse (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (GHC.List.reverse (arg1)) (Cons (arg0) (arg1)))
(Pair (GHC.List.repeat (arg0)) (arg1))
(Pair (GHC.List.repeat (arg0)) (GHC.List.tail (arg1)))
(Pair (GHC.List.repeat (arg0)) (GHC.List.reverse (arg1)))
(Pair (GHC.List.repeat (arg0)) (GHC.List.init (arg1)))
(Pair (GHC.List.repeat (arg0)) (GHC.List.cycle (arg1)))
(Pair (GHC.List.repeat (arg0)) (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.id (arg1)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (arg1)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (arg0)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.Maybe.Nothing)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.Bool.otherwise)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.Bool.True)))
(Pair (GHC.List.repeat (arg0)) (Data.Function.const (arg1) (Data.Bool.False)))
(Pair (GHC.List.repeat (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)))
(Pair (GHC.List.repeat (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)))
(Pair (GHC.List.repeat (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)))
(Pair (GHC.List.repeat (arg0)) (Cons (arg0) (arg1)))
(Pair (GHC.List.repeat (arg0)) ((GHC.List.++) (arg1) (arg1)))
(Pair (GHC.List.init (arg1)) (GHC.List.repeat (arg0)))
(Pair (GHC.List.init (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (GHC.List.init (arg1)) (Cons (arg0) (arg1)))
(Pair (GHC.List.cycle (arg1)) (GHC.List.repeat (arg0)))
(Pair (GHC.List.cycle (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (GHC.List.cycle (arg1)) (Cons (arg0) (arg1)))
(Pair (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Pair (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)) (GHC.List.repeat (arg0)))
(Pair (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Pair (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Pair (Data.Function.id (arg1)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.id (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.id (arg1)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (arg1)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (arg1)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (arg1))
(Pair (Data.Function.const (arg1) (arg0)) (GHC.List.tail (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (GHC.List.reverse (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (arg0)) (GHC.List.init (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (GHC.List.cycle (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Maybe.maybeToList (Data.Maybe.Nothing)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Maybe.fromJust (Data.Maybe.Nothing)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.id (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.Maybe.Nothing)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.Bool.otherwise)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.Bool.True)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Function.const (arg1) (Data.Bool.False)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)))
(Pair (Data.Function.const (arg1) (arg0)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)))
(Pair (Data.Function.const (arg1) (arg0)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (arg0)) ((GHC.List.++) (arg1) (arg1)))
(Pair (Data.Function.const (arg1) (Data.Maybe.Nothing)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (Data.Bool.otherwise)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.otherwise)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.otherwise)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (Data.Bool.True)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.True)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.True)) (Cons (arg0) (arg1)))
(Pair (Data.Function.const (arg1) (Data.Bool.False)) (GHC.List.repeat (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.False)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Function.const (arg1) (Data.Bool.False)) (Cons (arg0) (arg1)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)) (GHC.List.repeat (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)) (Cons (arg0) (arg1)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)) (GHC.List.repeat (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)) (Cons (arg0) (arg1)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)) (GHC.List.repeat (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)) (Data.Function.const (arg1) (arg0)))
(Pair (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)) (Cons (arg0) (arg1)))
(Pair (Cons (arg0) (arg1)) (arg1))
(Pair (Cons (arg0) (arg1)) (GHC.List.tail (arg1)))
(Pair (Cons (arg0) (arg1)) (GHC.List.reverse (arg1)))
(Pair (Cons (arg0) (arg1)) (GHC.List.repeat (arg0)))
(Pair (Cons (arg0) (arg1)) (GHC.List.init (arg1)))
(Pair (Cons (arg0) (arg1)) (GHC.List.cycle (arg1)))
(Pair (Cons (arg0) (arg1)) (Data.Maybe.maybeToList (Data.Maybe.Nothing)))
(Pair (Cons (arg0) (arg1)) (Data.Maybe.fromMaybe (arg1) (Data.Maybe.Nothing)))
(Pair (Cons (arg0) (arg1)) (Data.Maybe.fromJust (Data.Maybe.Nothing)))
(Pair (Cons (arg0) (arg1)) (Data.Function.id (arg1)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (arg1)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.Maybe.Nothing)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.ByteString.Lazy.getContents)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.ByteString.Lazy.empty)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.Bool.otherwise)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.Bool.True)))
(Pair (Cons (arg0) (arg1)) (Data.Function.const (arg1) (Data.Bool.False)))
(Pair (Cons (arg0) (arg1)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.otherwise)))
(Pair (Cons (arg0) (arg1)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.True)))
(Pair (Cons (arg0) (arg1)) (Data.Bool.bool (arg1) (arg1) (Data.Bool.False)))
(Pair (Cons (arg0) (arg1)) (Cons (arg0) (arg1)))
(Pair (Cons (arg0) (arg1)) ((GHC.List.++) (arg1) (arg1)))
(Pair ((GHC.List.++) (arg1) (arg1)) (GHC.List.repeat (arg0)))
(Pair ((GHC.List.++) (arg1) (arg1)) (Data.Function.const (arg1) (arg0)))
(Pair ((GHC.List.++) (arg1) (arg1)) (Cons (arg0) (arg1)))
(GHC.List.splitAt (GHC.List.length (arg1)) (GHC.List.repeat (arg0)))
(GHC.List.splitAt (GHC.List.length (arg1)) (Data.Function.const (arg1) (arg0)))
(GHC.List.splitAt (GHC.List.length (arg1)) (Cons (arg0) (arg1)))
(GHC.List.splitAt (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(GHC.List.splitAt (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Data.Maybe.fromMaybe (Pair (arg1) (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (arg0))
(Data.Function.const (Pair (arg1) (arg1)) (GHC.List.repeat (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Maybe.fromMaybe (arg0) (Data.Maybe.Nothing)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Maybe.Just (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.id (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg1) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (arg1)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.Maybe.Nothing)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.ByteString.Lazy.getContents)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.ByteString.Lazy.empty)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.ByteString.Lazy.getContents) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.ByteString.Lazy.empty) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.otherwise) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.True) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.False) (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Either.Left (arg0)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Maybe.Nothing) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Maybe.Nothing) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Maybe.Nothing) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.getContents) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.getContents) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.getContents) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.empty) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.empty) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.ByteString.Lazy.empty) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.otherwise) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.otherwise) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.otherwise) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.True) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.True) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.True) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.False) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.False) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (arg0) (Data.Bool.False) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Maybe.Nothing) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Maybe.Nothing) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Maybe.Nothing) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.getContents) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.getContents) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.getContents) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.empty) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.empty) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.ByteString.Lazy.empty) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.otherwise) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.otherwise) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.otherwise) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.True) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.True) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.True) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.False) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.False) (arg0) (Data.Bool.True)))
(Data.Function.const (Pair (arg1) (arg1)) (Data.Bool.bool (Data.Bool.False) (arg0) (Data.Bool.False)))
(Data.Function.const (Pair (arg1) (arg1)) (Cons (arg0) (arg1)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg0) (arg1)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Data.Either.fromRight (Pair (arg1) (arg1)) (Data.Either.Left (arg0)))
(Data.Either.fromLeft (Pair (arg1) (arg1)) (Data.Either.Right (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.otherwise) (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.True) (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.False) (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (Data.Bool.otherwise) (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (Data.Bool.True) (arg0)))
(Data.Bool.bool (Pair (arg1) (arg1)) (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (Data.Bool.False) (arg0)))
(Data.Bool.bool (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.otherwise) (arg0)))
(Data.Bool.bool (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.True) (arg0)))
(Data.Bool.bool (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg1) (arg1)) (Data.Function.const (Data.Bool.False) (arg0)))

