monospec:(([((c))]) -> (([((d))]) -> ([(([((((c) , (d))))]))])))
goal:(Data.Function.$)'ho', Data.Function.id'ho' ‚ä¢ goal :: <d> . <c> . (([((c))]) -> (([((d))]) -> ([(([((((c) , (d))))]))])))
goal = (?? :: (_))
(depth: 3)
destinationType:([(([((((c) , (d))))]))])
unifiedFuns: ("snd",(((a) , ([(([((((c) , (d))))]))])) -> [(([((((c) , (d))))]))]))
("fst",((([(([((((c) , (d))))]))]) , (b)) -> [(([((((c) , (d))))]))]))
("GHC.List.take",(Int -> ([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.tail",([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.sum",(@@hplusTC@@Num ([(([((((c) , (d))))]))]) -> ([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.reverse",([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.replicate",(Int -> ([((((c) , (d))))] -> [(([((((c) , (d))))]))])))
("GHC.List.repeat",([((((c) , (d))))] -> [(([((((c) , (d))))]))]))
("GHC.List.product",(@@hplusTC@@Num ([(([((((c) , (d))))]))]) -> ([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.minimum",(@@hplusTC@@Ord ([(([((((c) , (d))))]))]) -> ([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.maximum",(@@hplusTC@@Ord ([(([((((c) , (d))))]))]) -> ([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.last",([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.init",([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.head",([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.drop",(Int -> ([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))])))
("GHC.List.cycle",([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))]))
("GHC.List.concat",([(([(([((((c) , (d))))]))]))] -> [(([((((c) , (d))))]))]))
("Data.Tuple.snd",(((a) , ([(([((((c) , (d))))]))])) -> [(([((((c) , (d))))]))]))
("Data.Tuple.fst",((([(([((((c) , (d))))]))]) , (b)) -> [(([((((c) , (d))))]))]))
("Data.Maybe.maybeToList",(Maybe ([((((c) , (d))))]) -> [(([((((c) , (d))))]))]))
("Data.Maybe.fromMaybe",([(([((((c) , (d))))]))] -> (Maybe ([(([((((c) , (d))))]))]) -> [(([((((c) , (d))))]))])))
("Data.Maybe.fromJust",(Maybe ([(([((((c) , (d))))]))]) -> [(([((((c) , (d))))]))]))
("Data.Maybe.catMaybes",([((Maybe ([((((c) , (d))))])))] -> [(([((((c) , (d))))]))]))
("Data.Function.id",([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))]))
("Data.Function.const",([(([((((c) , (d))))]))] -> (b -> [(([((((c) , (d))))]))])))
("Data.Either.rights",([((Either (a) ([((((c) , (d))))])))] -> [(([((((c) , (d))))]))]))
("Data.Either.lefts",([((Either ([((((c) , (d))))]) (b)))] -> [(([((((c) , (d))))]))]))
("Data.Either.fromRight",([(([((((c) , (d))))]))] -> (Either (a) ([(([((((c) , (d))))]))]) -> [(([((((c) , (d))))]))])))
("Data.Either.fromLeft",([(([((((c) , (d))))]))] -> (Either ([(([((((c) , (d))))]))]) (b) -> [(([((((c) , (d))))]))])))
("Data.Bool.bool",([(([((((c) , (d))))]))] -> ([(([((((c) , (d))))]))] -> (Bool -> [(([((((c) , (d))))]))]))))
("Cons",([((((c) , (d))))] -> ([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))])))
("(GHC.List.++)",([(([((((c) , (d))))]))] -> ([(([((((c) , (d))))]))] -> [(([((((c) , (d))))]))])))
("(GHC.List.!!)",([(([(([((((c) , (d))))]))]))] -> (Int -> [(([((((c) , (d))))]))])))

(GHC.List.replicate (GHC.List.length (arg1)) (GHC.List.zip (arg0) (arg1)))
(GHC.List.replicate (GHC.List.length (arg0)) (GHC.List.zip (arg0) (arg1)))
(GHC.List.replicate (Data.Maybe.fromJust (Data.Maybe.Nothing)) (GHC.List.zip (arg0) (arg1)))
(GHC.List.repeat (GHC.List.zip (arg0) (arg1)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Function.const (arg0) (arg1)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Cons (arg1) (arg0)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) ((GHC.List.++) (arg1) (arg0)))
(Data.Function.const (Data.Maybe.maybeToList (Data.Maybe.Nothing)) ((GHC.List.++) (arg0) (arg1)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg1) (arg0)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (arg0) (arg1)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg1) (arg0) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.otherwise)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.True)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Bool.bool (arg0) (arg1) (Data.Bool.False)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Cons (arg1) (arg0)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Cons (arg0) (arg1)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) ((GHC.List.++) (arg1) (arg0)))
(Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) ((GHC.List.++) (arg0) (arg1)))
(Cons (GHC.List.zip (arg0) (arg1)) (Data.Maybe.maybeToList (Data.Maybe.Nothing)))
(Cons (GHC.List.zip (arg0) (arg1)) (Data.Maybe.fromJust (Data.Maybe.Nothing)))

