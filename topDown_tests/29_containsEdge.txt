(snd (Pair (snd (arg1)) (GHC.List.null (arg0))))
(fst (Pair (GHC.List.null (arg0)) (snd (arg1))))
(GHC.List.sum (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.product (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.or (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.null (snd (Pair (arg1) (arg0))))
(GHC.List.notElem (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (snd (arg1)) (snd (Pair (arg1) (arg0))))
(GHC.List.minimum (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.maximum (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.last (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.head (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.List.elem (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (snd (arg1)) (snd (Pair (arg1) (arg0))))
(GHC.List.and (GHC.List.replicate (snd (arg1)) (GHC.List.null (arg0))))
(GHC.Char.neChar (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg0) (arg1))))
(GHC.Char.eqChar (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (Data.Function.const (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg0) (arg1))))
(Data.Tuple.snd (Pair (snd (arg1)) (GHC.List.null (arg0))))
(Data.Tuple.fst (Pair (GHC.List.null (arg0)) (snd (arg1))))
(Data.Maybe.isNothing (GHC.List.lookup (Data.Maybe.fromJust (Data.Maybe.Nothing)) (snd (arg1)) (GHC.List.zip (arg0) (arg0))))
(Data.Maybe.isJust (GHC.List.lookup (Data.Maybe.fromJust (Data.Maybe.Nothing)) (snd (arg1)) (GHC.List.zip (arg0) (arg0))))
(Data.Maybe.fromMaybe (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg0) (Data.Maybe.Nothing))))
(Data.Maybe.fromJust (GHC.List.lookup (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Pair (arg1) (arg0)) (Data.Maybe.maybeToList (Data.Maybe.Nothing))))
(Data.Function.id (GHC.List.null (Data.Function.const (arg0) (arg1))))
(Data.Function.const (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg1) (arg0))))
(Data.Either.isRight (Data.Maybe.fromMaybe (Data.Either.Right (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.Either.isLeft (Data.Maybe.fromMaybe (Data.Either.Right (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.Either.fromRight (snd (Pair (arg1) (Data.Bool.otherwise))) (Data.Maybe.fromMaybe (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.Either.fromLeft (snd (Pair (arg1) (Data.Bool.otherwise))) (Data.Maybe.fromMaybe (Data.Maybe.fromJust (Data.Maybe.Nothing)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.ByteString.Lazy.null (Data.Maybe.fromMaybe (Data.Function.const (Data.ByteString.Lazy.empty) (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.ByteString.Lazy.notElem (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (Data.Maybe.fromMaybe (Data.Function.const (Data.ByteString.Lazy.empty) (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.ByteString.Lazy.isSuffixOf (snd (Pair (arg1) (Data.ByteString.Lazy.empty))) (snd (Pair (arg0) (Data.ByteString.Lazy.empty))))
(Data.ByteString.Lazy.isPrefixOf (snd (Pair (arg1) (Data.ByteString.Lazy.empty))) (snd (Pair (arg0) (Data.ByteString.Lazy.empty))))
(Data.ByteString.Lazy.elem (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (Data.Maybe.fromMaybe (Data.Function.const (Data.ByteString.Lazy.empty) (arg1)) (Data.Function.const (Data.Maybe.Nothing) (arg0))))
(Data.Bool.not (GHC.List.null (Data.Function.const (arg0) (arg1))))
(Data.Bool.bool (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg0) (Data.Bool.otherwise))))
((GHC.List.!!) (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (snd (Data.Function.const (arg1) (arg0))))
((Data.Eq.==) (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (snd (arg1)) (snd (Pair (arg1) (arg0))))
((Data.Eq./=) (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))) (snd (arg1)) (snd (Pair (arg1) (arg0))))
((Data.Bool.||) (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg0) (Data.Bool.otherwise))))
((Data.Bool.&&) (snd (Pair (arg1) (Data.Bool.otherwise))) (snd (Pair (arg0) (Data.Bool.otherwise))))
head: "(snd (snd (Data.Maybe.fromJust (Data.Maybe.Nothing))))"
Computation time: 3.027 sec
